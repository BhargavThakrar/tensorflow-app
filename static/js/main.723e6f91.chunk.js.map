{"version":3,"sources":["contexts/imageSearchContext.ts","lib/request.ts","utils/common.ts","providers/ImageSearchProvider/ImageSearchProvider.tsx","hooks/useImageSearch.ts","components/ImageUpload/loaderReducer.ts","constants/breeds.ts","utils/breeds.ts","components/ImageUpload/ImageUpload.tsx","components/ImageSearchResults/ImaageSearchResults.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createContext","request","url","a","options","Object","keys","length","method","defaultErrorMessage","fetch","response","isError","status","json","body","statusCode","data","error","message","delay","delayInms","Promise","resolve","setTimeout","captitalizeFirstChar","str","charAt","toUpperCase","substr","ImageProvider","children","useState","imageResults","setImageResults","setError","isLoading","setLoading","contextValue","searchImages","useCallback","searchResultsFor","images","lazyLoadImages","resImg","lazyImages","slice","call","querySelectorAll","window","lazyImageObserver","IntersectionObserver","entries","forEach","entry","isIntersecting","lazyImage","target","src","dataset","classList","remove","unobserve","observe","resetSearch","imageSearchContext","Provider","value","useImageSearch","useContext","UPLOADING","IDENTIFYING","CLEAR","initialLoaderState","loadingText","loaderReducer","state","action","type","BREED_NAME_TO_INPUT_NAME","pattern","input","formatPredictions","predictions","Array","isArray","map","breedName","className","probability","indexOf","split","parseFloat","toFixed","useStyles","makeStyles","theme","createStyles","primaryImage","display","flexDirection","justifyContent","alignItems","width","avatar","textAlign","padding","spacing","maxWidth","height","imagePreview","border","minHeight","marginBottom","color","imageDescription","uploadButton","margin","strong","fontWeight","link","cursor","palette","success","main","textTransform","fontSize","textDecoration","backgroundColor","footerTexts","ACCEPTED_FILES","ImageUpload","classes","useReducer","dispatchLoading","file","setFile","model","setModel","breeds","setBreeds","imgEl","useRef","isValidImage","includes","onImageUpload","event","files","currentTarget","filesAllowed","mimeType","join","URL","createObjectURL","previewImageLoaded","current","classify","handleBreedSearch","inputBreed","toLowerCase","i","test","splitWords","reduce","acc","word","unshift","formatBreedNameForApiSearch","useEffect","mobilenet","version","alpha","ref","alt","onLoad","Typography","List","dense","disablePadding","ListItem","ListItemText","primary","secondary","Button","role","onClick","disabled","variant","component","hidden","onChange","results","flexWrap","marginTop","resultsTitle","position","top","resultImage","breakpoints","down","objectFit","boxShadow","up","ImageSearchResults","scrollIntoView","behavior","Paper","image","data-src","header","content","App","ImageSearchProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.723e6f91.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport interface ImageResults {\n  images: string[];\n  searchResultsFor: string;\n}\n\ninterface ImageSearchContext {\n  imageResults: ImageResults | null;\n  error: string | null;\n  isLoading: boolean;\n  searchImages(searchResultsFor: string, url: string): Promise<void>;\n  lazyLoadImages(resImg: HTMLDivElement | null): void;\n  resetSearch(): void;\n}\n\nexport default createContext({} as ImageSearchContext);\n","export interface APIOptions {\n  method?: string;\n}\n\nexport async function request(url: string, options: APIOptions = {}) {\n  if (!Object.keys(options).length) {\n    options.method = 'GET';\n  }\n\n  const defaultErrorMessage = 'Something went wrong, please try again later.';\n\n  try {\n    const response: any = await fetch(url, options);\n    const isError = response.status < 200 || response.status > 299;\n    const body = await response.json();\n\n    return {\n      statusCode: response.status,\n      data: isError ? null : body,\n      error: isError ? body.message || defaultErrorMessage : null,\n    };\n  } catch (error) {\n    return {\n      statusCode: 500,\n      data: null,\n      error: error.message || defaultErrorMessage,\n    };\n  }\n}\n","export const isIntersectionObserverSupported = () =>\n  'IntersectionObserver' in window;\n\nexport const delay = (delayInms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(() => resolve(), delayInms));\n};\n\nexport const captitalizeFirstChar = (str: string): string => {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1, str.length)}`;\n};\n","import React, { useState, useCallback } from 'react';\n\nimport imageSearchContext, { ImageResults } from '../../contexts/imageSearchContext';\nimport { request } from '../../lib/request';\nimport { isIntersectionObserverSupported } from '../../utils/common';\n\ntype ImageProviderProps = {\n  children: React.ReactNode,\n}\n\nfunction ImageProvider({ children }: ImageProviderProps) {\n  const [imageResults, setImageResults] = useState<ImageResults | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setLoading] = useState<boolean>(false);\n\n  const searchImages = useCallback(async (searchResultsFor: string, url: string): Promise<void> => {\n    setError(null);\n    setImageResults(null);\n    setLoading(true);\n    \n    try {\n      const { data, error } = await request(url);\n      \n      if (error) {\n        setError(error);\n        return;\n      }\n      \n      setImageResults({\n        images: data.message,\n        searchResultsFor\n      });\n    } catch (error) {\n      setError(error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const lazyLoadImages = useCallback((resImg: HTMLDivElement): void => {\n    if (resImg) {\n      const lazyImages = [].slice.call(resImg.querySelectorAll(\"img.lazy\"));\n\n      /**\n       * Since we are targetting modern browsers for now, I have not implemented the fallback of intersection observer.\n       * We could use the polyfill or implement the traditional scroll events to lazy load images here.\n       */\n      if (isIntersectionObserverSupported()) {\n        let lazyImageObserver = new IntersectionObserver(function(entries: IntersectionObserverEntry[]) {\n          entries.forEach(function(entry: IntersectionObserverEntry) {\n            if (entry.isIntersecting) {\n              let lazyImage = entry.target as HTMLImageElement;\n              lazyImage.src = lazyImage.dataset.src!;\n              lazyImage.classList.remove(\"lazy\");\n              lazyImageObserver.unobserve(lazyImage);\n            }\n          });\n        });\n    \n        lazyImages.forEach(function(lazyImage) {\n          lazyImageObserver.observe(lazyImage);\n        });\n\n        return;\n      }\n    }\n  }, []);\n\n  const resetSearch = useCallback((): void => {\n    setImageResults(null);\n    setError(null);\n    setLoading(false);\n  }, []);\n\n  const contextValue = {\n    imageResults,\n    error,\n    isLoading,\n    searchImages,\n    lazyLoadImages,\n    resetSearch,\n  };\n\n  return <imageSearchContext.Provider value={contextValue}>{children}</imageSearchContext.Provider>;\n}\n\nexport default ImageProvider;\n","import { useContext } from 'react';\n\nimport imageSearchContext from '../contexts/imageSearchContext';\n\nconst useImageSearch = () => useContext(imageSearchContext);\n\nexport default useImageSearch;\n","interface LoadingState {\n  isLoading: boolean;\n  loadingText: null | string;\n}\n\n// Action types\nexport const UPLOADING = 'UPLOADING';\nexport const IDENTIFYING = 'IDENTIFYING';\nexport const CLEAR = 'CLEAR';\n\ntype LoadingActionTypes =\n  | {\n      type: typeof UPLOADING;\n    }\n  | {\n      type: typeof IDENTIFYING;\n    }\n  | {\n      type: typeof CLEAR;\n    };\n\nexport const initialLoaderState: LoadingState = {\n  isLoading: true,\n  loadingText: 'Loading model...',\n};\n\nexport const loaderReducer = (\n  state: LoadingState,\n  action: LoadingActionTypes,\n): LoadingState => {\n  switch (action.type) {\n    case UPLOADING:\n      return {\n        isLoading: true,\n        loadingText: 'Uploading image...',\n      };\n    case IDENTIFYING:\n      return {\n        isLoading: true,\n        loadingText: 'Identifying breed...',\n      };\n    case CLEAR:\n      return {\n        isLoading: false,\n        loadingText: null,\n      };\n    default:\n      return state;\n  }\n};\n","export const BREEDS_API_HOST = 'https://dog.ceo/api/breed';\n\n/**\n * This map is to figure out the API input to find similar images.\n * Some breed names from the tensorflow model cannot be directly mapped to DOG API requests\n * so, this is an exception list where we maintain this mapping between breed name inconsistencies.\n *\n * This is not the exhaustive list for now, and\n * there could be quite a few missing from this list so it could happen that for some breeds dog API fails\n * to return the images.\n */\nexport const BREED_NAME_TO_INPUT_NAME = [\n  {\n    pattern: /siberian.*husky/,\n    input: 'husky',\n  },\n  {\n    pattern: /.*eskimo.*/,\n    input: 'eskimo',\n  },\n  {\n    pattern: /english.*hound/,\n    input: 'hound/english',\n  },\n  {\n    pattern: /blood.*hound/,\n    input: 'hound/blood',\n  },\n  {\n    pattern: /flat.*coated.*retriever/,\n    input: 'retriever/flatcoated',\n  },\n  {\n    pattern: /american.*staffordshire.*terrier/,\n    input: 'terrier/american',\n  },\n  {\n    pattern: /bernese.*mountain.*/,\n    input: 'mountain/bernese',\n  },\n];\n","import { captitalizeFirstChar } from './common';\nimport { BREED_NAME_TO_INPUT_NAME } from '../constants/breeds';\nimport Prediction from '../components/ImageUpload/PredictionModel';\n\nconst getBreedNameFromPrediction = (breedName: string): string | null => {\n  if (typeof breedName !== 'string') {\n    return null;\n  }\n\n  if (breedName.indexOf(',') !== -1) {\n    return captitalizeFirstChar(breedName.split(',')[0]);\n  }\n\n  return captitalizeFirstChar(breedName);\n};\n\nexport const formatPredictions = (\n  predictions: Prediction[],\n): Prediction[] | null => {\n  if (Array.isArray(predictions) && predictions.length) {\n    return predictions.map(\n      ({ className, probability }: Prediction): Prediction => {\n        return {\n          className: getBreedNameFromPrediction(className)!,\n          probability: parseFloat((probability * 100).toFixed(2)),\n        };\n      },\n    );\n  }\n\n  return null;\n};\n\nexport const formatBreedNameForApiSearch = (breedName: string): string => {\n  const inputBreed = breedName.toLowerCase();\n\n  for (let i = 0; i < BREED_NAME_TO_INPUT_NAME.length; i++) {\n    const { pattern, input } = BREED_NAME_TO_INPUT_NAME[i];\n\n    if (pattern.test(inputBreed)) {\n      return input;\n    }\n  }\n\n  const splitWords = inputBreed.split(' ') || [];\n\n  if (splitWords.length) {\n    return splitWords\n      .reduce((acc: string[], word: string) => {\n        acc.unshift(word);\n        return acc;\n      }, [])\n      .join('/');\n  }\n\n  return inputBreed;\n};\n","import React, { useState, useRef, useEffect, useReducer } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport '@tensorflow/tfjs-backend-cpu';\n\nimport useImageSearch from '../../hooks/useImageSearch';\nimport { delay } from '../../utils/common';\nimport {\n  UPLOADING,\n  IDENTIFYING,\n  CLEAR,\n  initialLoaderState,\n  loaderReducer\n} from './loaderReducer';\nimport { BREEDS_API_HOST } from '../../constants/breeds';\nimport Prediction from './PredictionModel';\nimport { formatPredictions, formatBreedNameForApiSearch } from '../../utils/breeds';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    primaryImage: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: '100%',\n    },\n    avatar: {\n      width: 'auto',\n      textAlign: 'center',\n      padding: theme.spacing(2),\n\n      '& > img': {\n        maxWidth: '100%',\n        height: 'auto',\n      }\n    },\n    imagePreview: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      border: '2px dashed',\n      width: 200,\n      minHeight: 200,\n      marginBottom: theme.spacing(2),\n      color: '#A9A9A9',\n    },\n    imageDescription: {\n      textAlign: 'center',\n      marginBottom: theme.spacing(2),\n    },\n    uploadButton: {\n      margin: theme.spacing(2,0,1,0),\n    },\n    strong: {\n      fontWeight: 'bold'\n    },\n    link: {\n      cursor: 'pointer',\n      color: theme.palette.success.main,\n      padding: 0,\n      textTransform: 'inherit',\n      fontSize: 12,\n\n      '&:hover': {\n        textDecoration: 'underline',\n        backgroundColor: 'transparent',\n      }\n    },\n    footerTexts: {\n      textAlign: 'center',\n      padding: theme.spacing(1),\n\n      '& > span': {\n        marginBottom: theme.spacing(1),\n        display: 'block',\n      },\n    },\n  }),\n);\n\nconst ACCEPTED_FILES = ['image/jpeg', 'image/jpg', 'image/png'];\n\nfunction ImageUpload() {\n  const classes = useStyles();\n\n  const [{ isLoading, loadingText }, dispatchLoading] = useReducer(loaderReducer, initialLoaderState);\n  \n  const [file, setFile] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [model, setModel] = useState<mobilenet.MobileNet | null>(null);\n  const [breeds, setBreeds] = useState<Prediction[] | null>(null);\n\n  const { searchImages, resetSearch } = useImageSearch();\n  const imgEl = useRef<HTMLImageElement>(null);\n  \n  const reset = () => {\n    setFile(null);\n    setBreeds(null);\n    setError(null);\n    resetSearch();\n  }\n\n  const isValidImage = (file: File): boolean => {\n    return ACCEPTED_FILES.includes(file.type);\n  }\n\n  const onImageUpload = async (event: React.FormEvent<HTMLInputElement>): Promise<void> => {\n    const files = event.currentTarget.files;\n\n    if (files && files[0]) {\n      reset();\n\n      if (!isValidImage(files[0])) {\n        const filesAllowed = ACCEPTED_FILES.map((mimeType: string) => (\n          mimeType.substr(mimeType.indexOf('/') + 1, mimeType.length)\n        ));\n        setError(`Invalid file. Only these files are allowed - ${filesAllowed.join(', ')}`);\n        return;\n      }\n      \n      dispatchLoading({ type: UPLOADING });\n\n      await delay(500);\n      setFile(URL.createObjectURL(files[0]));\n    }\n  }\n\n  const previewImageLoaded = async () => {\n    dispatchLoading({ type: IDENTIFYING });\n\n    // Classify the image\n    if (imgEl.current && model) {\n      const predictions: Prediction[] = await model.classify(imgEl.current);\n      \n      setBreeds(formatPredictions(predictions));\n      dispatchLoading({ type: CLEAR });\n    }\n  }\n\n  const handleBreedSearch = (breedName: string) => () => {\n    searchImages(breedName, `${BREEDS_API_HOST}/${formatBreedNameForApiSearch(breedName)}/images`);\n  }\n\n  useEffect(() => {\n    (async () => {\n      // Load the model\n      /**\n       * It by default loads all the models and will detects all types of images.\n       * But, in the interest of time I have not researched on that part but, I'm pretty sure\n       * we can load specific models and detect only specific category of images.\n       */\n      setModel(await mobilenet.load({\n        version: 2,\n        alpha: 0.50,\n      }));\n      dispatchLoading({ type: CLEAR });\n    })();\n  }, []);\n\n  return (\n    <>\n      <div className={classes.primaryImage}>\n        <div className={classes.imagePreview}>\n          {file ? (\n              <div className={classes.avatar}>\n                <img ref={imgEl} alt=\"dog breed preview\" src={file} onLoad={previewImageLoaded} /> \n              </div>\n          ) : (<Typography>Image preview</Typography>)}\n        </div> \n        {breeds && breeds.length > 0 && (\n          <>\n            <Typography className={classes.strong}>Predictions</Typography>\n            <List dense disablePadding>\n              {breeds.map(({ className, probability }) => (\n                <ListItem key={`${className}${probability}`}>\n                  <ListItemText\n                    primary={`${className} (${probability}%)`}\n                    secondary={(\n                      <Button role=\"link\" className={classes.link} onClick={handleBreedSearch(className)}>Find similar images</Button>\n                    )}\n                  />\n                </ListItem>\n              ))}\n            </List>\n          </>\n        )}\n        <Button disabled={isLoading} color=\"primary\" variant=\"contained\" component=\"label\" className={classes.uploadButton}>\n          {loadingText ? loadingText : 'Upload image'}\n          <input type=\"file\" hidden onChange={onImageUpload} />\n        </Button>\n        <div className={classes.footerTexts}>\n          <Typography variant=\"caption\">Upload any dog image and let system predict the breed!</Typography>\n          <Typography variant=\"caption\">\n            <span className={classes.strong}>\n              Note: It detects all types of images but, if you need to further search for similar images then, please upload dog images only.\n            </span>\n          </Typography>\n          {error && (\n            <Typography variant=\"subtitle1\" color=\"error\">{error}</Typography>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default ImageUpload;\n","import React, { useRef, useEffect } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\n\nimport useImageSearch from '../../hooks/useImageSearch';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    results: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      alignItems: 'center',\n      justifyContent: 'center',\n      marginTop: theme.spacing(5),\n      padding: theme.spacing(0, 1),\n    },\n    resultsTitle: {\n      width: '100%',\n      padding: theme.spacing(1),\n      backgroundColor: '#fff',\n      textAlign: 'center',\n      position: 'sticky',\n      top: 0,\n    },\n    resultImage: {\n      height: '20vh',\n      padding: theme.spacing(2),\n      \n      [theme.breakpoints.down(700)]: {\n        width: '45%',\n        padding: theme.spacing(1),  \n      },\n\n      '& > img': {\n        objectFit: 'cover',\n\n        [theme.breakpoints.down(700)]: {\n          maxWidth: '100%',\n          height: 'auto',\n        },\n\n        minWidth: '100%',\n        maxHeight: '20vh',\n\n        verticalAlign: 'bottom',\n        borderRadius: theme.spacing(1),\n\n        '&:hover': {\n          boxShadow: '2px 2px 6px 2px #ccc',\n        },\n\n        [theme.breakpoints.up(700)]: {\n          border: '1px solid #d9d9d9',\n          padding: theme.spacing(1),\n        },\n      },\n    },\n    error: {\n      padding: theme.spacing(1),\n      color: '#fff',\n      backgroundColor: theme.palette.error.main,\n    },\n  }),\n);\n\nfunction ImageSearchResults() {\n  const classes = useStyles();\n\n  const {imageResults, error, lazyLoadImages, isLoading} = useImageSearch();\n  const { images, searchResultsFor } = imageResults || {};\n  const resImg = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    lazyLoadImages(resImg.current);\n\n    if (resImg.current && resImg.current.scrollIntoView) {\n      resImg.current?.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [imageResults, error, lazyLoadImages]);\n  \n  return (\n    <>\n      <div className={classes.results} ref={resImg}>\n        {error && (\n          <Paper className={classes.error} role=\"alert\">\n            <Typography variant=\"subtitle1\">{error}</Typography>\n          </Paper>\n        )}\n        {isLoading && 'Loading images...'}\n        {images && images.length > 0 && (\n          <>\n            <Typography variant=\"h4\" className={classes.resultsTitle}>Similar images of \"{searchResultsFor}\"</Typography>\n            {images.map((image: string) => (\n              <div className={classes.resultImage} key={image}>\n                {/**\n                 * Using the same alt text for all images.\n                 * But we could use dynamic one if we have human readable imaage texts from API\n                 */}\n                <img className=\"lazy\" alt=\"dog breed\" src=\"./images/loading-img.jpg\" data-src={image} />\n              </div>\n            ))}\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default ImageSearchResults;\n","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\nimport ImageSearchProvider from './providers/ImageSearchProvider';\nimport ImageUpload from './components/ImageUpload';\nimport ImageSearchResults from './components/ImageSearchResults';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    header: {\n      textAlign: 'center',\n      marginTop: theme.spacing(2),\n    },\n    content: {\n      marginTop: theme.spacing(4),\n    },\n  }),\n);\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <ImageSearchProvider>\n      <header className={classes.header}>\n        <Typography variant=\"h3\">Tensorflow app</Typography>\n      </header>\n      <main className={classes.content}>\n        <ImageUpload />\n        <ImageSearchResults />\n      </main>\n    </ImageSearchProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}